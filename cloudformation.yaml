AWSTemplateFormatVersion: 2010-09-09

Parameters:

  UrsHostname:
    Type: String
    AllowedValues:
    - https://urs.earthdata.nasa.gov
    - https://uat.urs.earthdata.nasa.gov
    Default: https://urs.earthdata.nasa.gov

  UrsTokenUri:
    Type: String
    Default: /oauth/token

  UrsProfileUri:
    Type: String
    Default: /profile

  UrsClientId:
    Type: String

  UrsClientPassword:
    Type: String
    NoEcho: true

  CookieName:
    Type: String
    Default: datapool-session

  CookieDomain:
    Type: String
    Default: asf.alaska.edu

  CookieDurationInSeconds:
    Type: Number
    MinValue: 0
    Default: 86400

  JwtPrivateKey:
    Type: String
    NoEcho: true

  JwtPublicKey:
    Type: String
    Default: ""

  JwtAlgorithm:
    Type: String
    AllowedValues:
    - RS256
    - HS256
    Default: RS256

  DomainName:
    Type: String

  CertificateArn:
    Type: String

  LogRetentionInDays:
    Type: Number
    MinValue: 1
    Default: 180

Outputs:

  UrsRedirectUri:
    Value: !Sub "https://${DomainName}/login"

  DnsCname:
    Value: !Sub "${RestApi}.execute-api.${AWS::Region}.amazonaws.com."

Resources:

  Secret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Ref AWS::StackName
      SecretString: !Sub |-
        {
          "UrsHostname": "${UrsHostname}",
          "UrsTokenUri": "${UrsTokenUri}",
          "UrsProfileUri": "${UrsProfileUri}",
          "UrsClientId": "${UrsClientId}",
          "UrsClientPassword": "${UrsClientPassword}",
          "UrsRedirectUri": "https://${DomainName}/login",
          "CookieName": "${CookieName}",
          "CookieDomain": "${CookieDomain}",
          "CookieDurationInSeconds": ${CookieDurationInSeconds},
          "JwtPrivateKey": "${JwtPrivateKey}",
          "JwtPublicKey": "${JwtPublicKey}",
          "JwtAlgorithm": "${JwtAlgorithm}"
        }

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}"
      RetentionInDays: !Ref LogRetentionInDays

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref AWS::StackName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      Policies:
      - PolicyName: policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !GetAtt LambdaLogGroup.Arn
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !Ref Secret

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref AWS::StackName
      Code: src/
      Environment:
        Variables:
          CONFIG_SECRET_ARN: !Ref Secret
      Handler: main.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 30

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: !Ref LogRetentionInDays

  CustomDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainName
      CertificateArn: !Ref CertificateArn

  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref CustomDomainName
      RestApiId: !Ref RestApi
      Stage: !Ref Stage

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref AWS::StackName
      Body:
        openapi: 3.0.1
        paths:
          /login:
            get:
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehvaior: when_no_match
          /logout:
            get:
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehvaior: when_no_match
          /key:
            get:
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehvaior: when_no_match

  DeploymentREPLACE_ME:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: auth-api
      RestApiId: !Ref RestApi
      DeploymentId: !Ref DeploymentREPLACE_ME
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: $context.identity.sourceIp,$context.identity.caller,$context.identity.user,$context.requestTime,$context.httpMethod,$context.resourcePath,$context.protocol,$context.status,$context.responseLength,$context.requestId

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*"
