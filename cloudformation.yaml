AWSTemplateFormatVersion: 2010-09-09

Parameters:

  UrsHostname:
    Type: String
    AllowedValues:
    - https://urs.earthdata.nasa.gov
    - https://uat.urs.earthdata.nasa.gov
    Default: https://urs.earthdata.nasa.gov

  UrsTokenUri:
    Type: String
    Default: /oauth/token

  UrsClientId:
    Type: String

  UrsClientPassword:
    Type: String
    NoEcho: true

  UrsGroupName:
    Type: String
    Default: DAAC_DATAPOOL

  CookieName:
    Type: String
    Default: datapool-session

  CookieDomain:
    Type: String
    Default: asf.alaska.edu

  CookieDurationInSeconds:
    Type: Number
    MinValue: 0
    Default: 86400

  JwtKey:
    Type: String
    NoEcho: true

  JwtAlgorithm:
    Type: String
    AllowedValues:
    - RS256
    - HS256
    Default: RS256

  DomainName:
    Type: String

  CertificateArn:
    Type: String

Outputs:

  ApiEndpoint:
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"

Resources:

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}"
      RetentionInDays: 30

  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref AWS::StackName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      Policies:
      - PolicyName: policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !GetAtt LogGroup.Arn

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref AWS::StackName
      Code: src/
      Environment:
        Variables:
          URS_HOSTNAME: !Ref UrsHostname
          URS_TOKEN_URI: !Ref UrsTokenUri
          URS_CLIENT_ID: !Ref UrsClientId
          URS_CLIENT_PASSWORD: !Ref UrsClientPassword
          URS_REDIRECT_URI: !Sub "https://${DomainName}/oauth"
          URS_GROUP_NAME: !Ref UrsGroupName
          COOKIE_NAME: !Ref CookieName
          COOKIE_DOMAIN: !Ref CookieDomain
          COOKIE_DURATION_IN_SECONDS: !Ref CookieDurationInSeconds
          JWT_KEY: !Ref JwtKey
          JWT_ALGORITHM: !Ref JwtAlgorithm
      Handler: main.lambda_handler
      MemorySize: 128
      Role: !GetAtt Role.Arn
      Runtime: python3.7
      Timeout: 30

      #  CustomDomainName:
      #    Type: AWS::ApiGateway::DomainName
      #    Properties:
      #      DomainName: !Ref DomainName
      #      CertificateArn: !Ref CertificateArn

      #  BasePathMapping:
      #    Type: AWS::ApiGateway::BasePathMapping
      #    Properties:
      #      DomainName: !Ref CustomDomainName
      #      RestApiId: !Ref RestApi

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref AWS::StackName
      Body:
        openapi: 3.0.1
        info:
          title: oauth
          version: 0.0.1
        paths:
          /:
            get:
              parameters:
              - name: code
                in: query
                required: true
              - name: state
                in: query
                required: true
              responses:
                '307':
                  description: success
                default:
                  description: error
              x-amazon-apigateway-request-validator: parameters-only
              x-amazon-apigateway-integration:
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehvaior: when_no_match
                responses:
                  default:
                    statusCode: 200
        x-amazon-apigateway-request-validators:
          parameters-only:
            validateRequestParameters: true
            validateRequestBody: false

  DeploymentREPLACE_ME:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: oauth
      RestApiId: !Ref RestApi
      DeploymentId: !Ref DeploymentREPLACE_ME

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*"
